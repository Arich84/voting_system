"""
Django settings for automatedvote project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""



import os
from dotenv import load_dotenv
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

import environ

env = environ.Env()
environ.Env.read_env()

ALLOWED_HOST = ['*']


import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'captcha',
    'app1',
    'comparison',
    'rest_framework',
     
    

    
    
    
    


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'app1.middleware.IPRestrictionMiddleware',
    'app1.middleware.UserActivityMiddleware',
     
    
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db' 

ROOT_URLCONF = 'automatedvote.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                 'app1.context_processors.user_role',
                 'app1.context_processors.role_based_notifications',
            ],
        },
    },
]


WSGI_APPLICATION = 'automatedvote.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# settings.py


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     },
#     'Comparison': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'Comparison_db.sqlite3',
#     }
# }

import os
from dotenv import load_dotenv

load_dotenv()

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('RAILWAY_DEFAULT_DB_NAME'),
        'USER': os.getenv('RAILWAY_DEFAULT_DB_USER'),
        'PASSWORD': os.getenv('RAILWAY_DEFAULT_DB_PASSWORD'),
        'HOST': os.getenv('RAILWAY_DEFAULT_DB_HOST'),
        'PORT': os.getenv('RAILWAY_DEFAULT_DB_PORT'),
    },
    'Comparison': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('RAILWAY_COMPARISON_DB_NAME'),
        'USER': os.getenv('RAILWAY_COMPARISON_DB_USER'),
        'PASSWORD': os.getenv('RAILWAY_COMPARISON_DB_PASSWORD'),
        'HOST': os.getenv('RAILWAY_COMPARISON_DB_HOST'),
        'PORT': os.getenv('RAILWAY_COMPARISON_DB_PORT'),
    }
}














# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    
    {
        'NAME': 'automatedvote.validators.SpecialCharacterValidator',
    },
    
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
         'OPTIONS':{'min_length':8},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# settings.py
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') 
DATABASE_ROUTERS = ['app1.database_router.CustomUserDatabaseRouter',
                    'comparison.database_router.ComparisonDatabaseRouter']


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'app1.CustomUser'

#settings.py

# Redirect to profile after login
LOGIN_REDIRECT_URL = 'profile'

# Redirect to home after logout
LOGOUT_REDIRECT_URL = 'home'

import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', default=587))  # Ensure port is an integer
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')



# Adjust the CAPTCHA font size (default is typically around 22 or 24)
CAPTCHA_FONT_SIZE = 40  # Set the desired font size

# Optionally, adjust the image size if needed
CAPTCHA_IMAGE_SIZE = (150, 60)  # Width, Height of the CAPTCHA image

# Optionally, set the path to the font you want to use
CAPTCHA_FONT_PATH = '/path/to/your/font.ttf'  # Use the font file of your choice

# settings.py

CAPTCHA_ENABLED = True  # or False, depending on your needs
CAPTCHA_LENGTH = 7      # Define the default length for CAPTCHA text


DATABASE_ROUTERS = ['app1.database_router.CustomUserDatabaseRouter',
                    'comparison.database_router.ComparisonDatabaseRouter']

# settings.py
LANGUAGES = [
    ('en', 'English'),
    ('fr', 'French'),
]



# In settings.py
ALLOWED_IPS = ['127.0.0.1']  # Add your local IP


